"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/discovery/page",{

/***/ "(app-pages-browser)/./stores/useAppStore.ts":
/*!*******************************!*\
  !*** ./stores/useAppStore.ts ***!
  \*******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAppLoading: function() { return /* binding */ useAppLoading; },\n/* harmony export */   useAppStore: function() { return /* binding */ useAppStore; },\n/* harmony export */   useHasCompletedOnboarding: function() { return /* binding */ useHasCompletedOnboarding; },\n/* harmony export */   useHydratedStore: function() { return /* binding */ useHydratedStore; },\n/* harmony export */   useOnboardingActions: function() { return /* binding */ useOnboardingActions; },\n/* harmony export */   useOnboardingState: function() { return /* binding */ useOnboardingState; },\n/* harmony export */   useOnboardingStep: function() { return /* binding */ useOnboardingStep; },\n/* harmony export */   useUserData: function() { return /* binding */ useUserData; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nconst useAppStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.persist)((set, get)=>({\n        // Initial state\n        hasCompletedOnboarding: false,\n        isOnboardingInProgress: false,\n        currentOnboardingStep: 1,\n        userPreferences: null,\n        bookRatings: [],\n        authorRatings: [],\n        userBooks: [],\n        readingGoals: [],\n        isLoading: false,\n        // Helper function to migrate old placeholder URLs\n        _migrateOldPlaceholders: ()=>set((state)=>({\n                    userBooks: state.userBooks.map((book)=>({\n                            ...book,\n                            cover: book.cover.includes(\"via.placeholder.com\") ? \"/placeholder-book.jpg\" : book.cover\n                        }))\n                })),\n        // Basic setters\n        setOnboardingCompleted: (completed)=>set({\n                hasCompletedOnboarding: completed\n            }),\n        setOnboardingStep: (step)=>set({\n                currentOnboardingStep: step\n            }),\n        setOnboardingInProgress: (inProgress)=>set({\n                isOnboardingInProgress: inProgress\n            }),\n        setUserPreferences: (preferences)=>set({\n                userPreferences: preferences\n            }),\n        setBookRatings: (ratings)=>set({\n                bookRatings: ratings\n            }),\n        setAuthorRatings: (ratings)=>set({\n                authorRatings: ratings\n            }),\n        // User books actions\n        setUserBooks: (books)=>set({\n                userBooks: books\n            }),\n        addUserBook: (book)=>set((state)=>({\n                    userBooks: [\n                        ...state.userBooks,\n                        book\n                    ]\n                })),\n        updateUserBook: (bookId, updates)=>set((state)=>({\n                    userBooks: state.userBooks.map((book)=>book.id === bookId ? {\n                            ...book,\n                            ...updates\n                        } : book)\n                })),\n        removeUserBook: (bookId)=>set((state)=>({\n                    userBooks: state.userBooks.filter((book)=>book.id !== bookId)\n                })),\n        clearOldDiscoverBooks: ()=>set((state)=>({\n                    userBooks: state.userBooks.filter((book)=>!book.id.startsWith(\"discover-\"))\n                })),\n        isBookInLibrary: (bookId)=>{\n            const state = get();\n            return state.userBooks.some((book)=>book.id === bookId);\n        },\n        getBookFromLibrary: (bookId)=>{\n            const state = get();\n            return state.userBooks.find((book)=>book.id === bookId);\n        },\n        // Reading goals actions\n        setReadingGoals: (goals)=>set({\n                readingGoals: goals\n            }),\n        addReadingGoal: (goal)=>set((state)=>({\n                    readingGoals: [\n                        ...state.readingGoals,\n                        goal\n                    ]\n                })),\n        updateReadingGoal: (goalId, updates)=>set((state)=>({\n                    readingGoals: state.readingGoals.map((goal)=>goal.id === goalId ? {\n                            ...goal,\n                            ...updates\n                        } : goal)\n                })),\n        removeReadingGoal: (goalId)=>set((state)=>({\n                    readingGoals: state.readingGoals.filter((goal)=>goal.id !== goalId)\n                })),\n        getActiveReadingGoal: (year)=>{\n            const state = get();\n            const currentYear = year || new Date().getFullYear();\n            return state.readingGoals.find((goal)=>goal.year === currentYear && goal.isActive);\n        },\n        likeBook: (bookId, bookData)=>set((state)=>{\n                const existingBook = state.userBooks.find((book)=>book.id === bookId);\n                if (existingBook) {\n                    // Update existing book\n                    return {\n                        userBooks: state.userBooks.map((book)=>book.id === bookId ? {\n                                ...book,\n                                isLiked: true\n                            } : book)\n                    };\n                } else {\n                    // Add new book as liked\n                    const newBook = {\n                        id: bookId,\n                        title: bookData.title || \"Unknown Title\",\n                        author: bookData.author || \"Unknown Author\",\n                        cover: bookData.cover || \"/placeholder-book.jpg\",\n                        description: bookData.description || \"\",\n                        rating: bookData.rating || 0,\n                        status: \"want-to-read\",\n                        dateAdded: new Date().toISOString().split(\"T\")[0],\n                        genre: bookData.genre || [],\n                        mood: bookData.mood || [],\n                        isbn: bookData.isbn || \"\",\n                        pages: bookData.pages || 0,\n                        publishedYear: bookData.publishedYear || new Date().getFullYear(),\n                        isLiked: true,\n                        ...bookData\n                    };\n                    return {\n                        userBooks: [\n                            ...state.userBooks,\n                            newBook\n                        ]\n                    };\n                }\n            }),\n        unlikeBook: (bookId)=>set((state)=>({\n                    userBooks: state.userBooks.map((book)=>book.id === bookId ? {\n                            ...book,\n                            isLiked: false\n                        } : book)\n                })),\n        rateBook: (bookId, rating, bookData)=>set((state)=>{\n                const existingBook = state.userBooks.find((book)=>book.id === bookId);\n                if (existingBook) {\n                    // Update existing book\n                    return {\n                        userBooks: state.userBooks.map((book)=>book.id === bookId ? {\n                                ...book,\n                                userRating: rating\n                            } : book)\n                    };\n                } else if (bookData) {\n                    // Add new book with rating\n                    const newBook = {\n                        id: bookId,\n                        title: bookData.title || \"Unknown Title\",\n                        author: bookData.author || \"Unknown Author\",\n                        cover: bookData.cover || \"/placeholder-book.jpg\",\n                        description: bookData.description || \"\",\n                        rating: bookData.rating || 0,\n                        status: \"want-to-read\",\n                        dateAdded: new Date().toISOString().split(\"T\")[0],\n                        genre: bookData.genre || [],\n                        mood: bookData.mood || [],\n                        isbn: bookData.isbn || \"\",\n                        pages: bookData.pages || 0,\n                        publishedYear: bookData.publishedYear || new Date().getFullYear(),\n                        userRating: rating,\n                        ...bookData\n                    };\n                    return {\n                        userBooks: [\n                            ...state.userBooks,\n                            newBook\n                        ]\n                    };\n                }\n                return state;\n            }),\n        setLoading: (loading)=>set({\n                isLoading: loading\n            }),\n        // Complex actions\n        completeOnboarding: (preferences, bookRatings, authorRatings)=>set({\n                hasCompletedOnboarding: true,\n                isOnboardingInProgress: false,\n                userPreferences: preferences,\n                bookRatings,\n                authorRatings,\n                currentOnboardingStep: 1\n            }),\n        resetOnboarding: ()=>set({\n                hasCompletedOnboarding: false,\n                isOnboardingInProgress: false,\n                currentOnboardingStep: 1,\n                userPreferences: null,\n                bookRatings: [],\n                authorRatings: []\n            }),\n        // Computed getters\n        getRecommendationData: ()=>{\n            const state = get();\n            return {\n                preferences: state.userPreferences,\n                bookRatings: state.bookRatings,\n                authorRatings: state.authorRatings\n            };\n        }\n    }), {\n    name: \"bookhaven-app-store\",\n    storage: (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.createJSONStorage)(()=>localStorage),\n    // Only persist certain parts of the state\n    partialize: (state)=>({\n            hasCompletedOnboarding: state.hasCompletedOnboarding,\n            userPreferences: state.userPreferences,\n            bookRatings: state.bookRatings,\n            authorRatings: state.authorRatings,\n            userBooks: state.userBooks\n        }),\n    // Add some safeguards to prevent hydration issues\n    skipHydration: false\n}));\n// Hydration-safe hook to prevent SSR mismatches\nconst useHydratedStore = ()=>{\n    const [hasHydrated, setHasHydrated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Wait for Zustand to hydrate\n        const unsubscribe = useAppStore.persist.onFinishHydration(()=>{\n            setHasHydrated(true);\n        });\n        // If already hydrated\n        if (useAppStore.persist.hasHydrated()) {\n            setHasHydrated(true);\n        }\n        return unsubscribe;\n    }, []);\n    return hasHydrated;\n};\n// Individual selectors for better performance\nconst useHasCompletedOnboarding = ()=>useAppStore((state)=>state.hasCompletedOnboarding);\nconst useOnboardingStep = ()=>useAppStore((state)=>state.currentOnboardingStep);\nconst useOnboardingActions = ()=>useAppStore((state)=>({\n            setStep: state.setOnboardingStep,\n            complete: state.completeOnboarding,\n            reset: state.resetOnboarding\n        }));\n// For backward compatibility, keep the combined hook but make it more stable\nconst useOnboardingState = ()=>{\n    const hasCompleted = useAppStore((state)=>state.hasCompletedOnboarding);\n    const isInProgress = useAppStore((state)=>state.isOnboardingInProgress);\n    const currentStep = useAppStore((state)=>state.currentOnboardingStep);\n    const setCompleted = useAppStore((state)=>state.setOnboardingCompleted);\n    const setInProgress = useAppStore((state)=>state.setOnboardingInProgress);\n    const setStep = useAppStore((state)=>state.setOnboardingStep);\n    const complete = useAppStore((state)=>state.completeOnboarding);\n    const reset = useAppStore((state)=>state.resetOnboarding);\n    // Return a stable object by using useMemo if needed\n    return {\n        hasCompleted,\n        isInProgress,\n        currentStep,\n        setCompleted,\n        setInProgress,\n        setStep,\n        complete,\n        reset\n    };\n};\nconst useUserData = ()=>{\n    const preferences = useAppStore((state)=>state.userPreferences);\n    const bookRatings = useAppStore((state)=>state.bookRatings);\n    const authorRatings = useAppStore((state)=>state.authorRatings);\n    const setPreferences = useAppStore((state)=>state.setUserPreferences);\n    const setBookRatings = useAppStore((state)=>state.setBookRatings);\n    const setAuthorRatings = useAppStore((state)=>state.setAuthorRatings);\n    const getRecommendationData = useAppStore((state)=>state.getRecommendationData);\n    return {\n        preferences,\n        bookRatings,\n        authorRatings,\n        setPreferences,\n        setBookRatings,\n        setAuthorRatings,\n        getRecommendationData\n    };\n};\nconst useAppLoading = ()=>useAppStore((state)=>({\n            isLoading: state.isLoading,\n            setLoading: state.setLoading\n        }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3N0b3Jlcy91c2VBcHBTdG9yZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDK0I7QUFDcEI7QUEySXJDLE1BQU1LLGNBQWNMLCtDQUFNQSxHQUMvQkMsMkRBQU9BLENBQ0wsQ0FBQ0ssS0FBS0MsTUFBUztRQUNiLGdCQUFnQjtRQUNoQkMsd0JBQXdCO1FBQ3hCQyx3QkFBd0I7UUFDeEJDLHVCQUF1QjtRQUN2QkMsaUJBQWlCO1FBQ2pCQyxhQUFhLEVBQUU7UUFDZkMsZUFBZSxFQUFFO1FBQ2pCQyxXQUFXLEVBQUU7UUFDYkMsY0FBYyxFQUFFO1FBQ2hCQyxXQUFXO1FBRVgsa0RBQWtEO1FBQ2xEQyx5QkFBeUIsSUFDdkJYLElBQUksQ0FBQ1ksUUFBVztvQkFDZEosV0FBV0ksTUFBTUosU0FBUyxDQUFDSyxHQUFHLENBQUMsQ0FBQ0MsT0FBVTs0QkFDeEMsR0FBR0EsSUFBSTs0QkFDUEMsT0FBT0QsS0FBS0MsS0FBSyxDQUFDQyxRQUFRLENBQUMseUJBQ3ZCLDBCQUNBRixLQUFLQyxLQUFLO3dCQUNoQjtnQkFDRjtRQUVGLGdCQUFnQjtRQUNoQkUsd0JBQXdCLENBQUNDLFlBQ3ZCbEIsSUFBSTtnQkFBRUUsd0JBQXdCZ0I7WUFBVTtRQUUxQ0MsbUJBQW1CLENBQUNDLE9BQVNwQixJQUFJO2dCQUFFSSx1QkFBdUJnQjtZQUFLO1FBRS9EQyx5QkFBeUIsQ0FBQ0MsYUFDeEJ0QixJQUFJO2dCQUFFRyx3QkFBd0JtQjtZQUFXO1FBRTNDQyxvQkFBb0IsQ0FBQ0MsY0FDbkJ4QixJQUFJO2dCQUFFSyxpQkFBaUJtQjtZQUFZO1FBRXJDQyxnQkFBZ0IsQ0FBQ0MsVUFBWTFCLElBQUk7Z0JBQUVNLGFBQWFvQjtZQUFRO1FBRXhEQyxrQkFBa0IsQ0FBQ0QsVUFBWTFCLElBQUk7Z0JBQUVPLGVBQWVtQjtZQUFRO1FBRTVELHFCQUFxQjtRQUNyQkUsY0FBYyxDQUFDQyxRQUFVN0IsSUFBSTtnQkFBRVEsV0FBV3FC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YSxjQUFjO0lBQ2xFLE1BQU1FLG1CQUFtQjVCLFlBQVksQ0FBQ2EsUUFBVUEsTUFBTWUsZ0JBQWdCO0lBQ3RFLE1BQU1zRCx3QkFBd0JsRixZQUM1QixDQUFDYSxRQUFVQSxNQUFNcUUscUJBQXFCO0lBR3hDLE9BQU87UUFDTHpEO1FBQ0FsQjtRQUNBQztRQUNBa0c7UUFDQWhGO1FBQ0FFO1FBQ0FzRDtJQUNGO0FBQ0YsRUFBRTtBQUVLLE1BQU15QixnQkFBZ0IsSUFDM0IzRyxZQUFZLENBQUNhLFFBQVc7WUFDdEJGLFdBQVdFLE1BQU1GLFNBQVM7WUFDMUJtRSxZQUFZakUsTUFBTWlFLFVBQVU7UUFDOUIsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zdG9yZXMvdXNlQXBwU3RvcmUudHM/NzQwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGUgfSBmcm9tIFwienVzdGFuZFwiO1xyXG5pbXBvcnQgeyBwZXJzaXN0LCBjcmVhdGVKU09OU3RvcmFnZSB9IGZyb20gXCJ6dXN0YW5kL21pZGRsZXdhcmVcIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VyUHJlZmVyZW5jZXMge1xyXG4gIGdlbnJlczogc3RyaW5nW107XHJcbiAgdG9waWNzOiBzdHJpbmdbXTtcclxuICBsYW5ndWFnZXM6IHN0cmluZ1tdO1xyXG4gIHJlYWRpbmdHb2FsPzogbnVtYmVyO1xyXG4gIHJlYWRpbmdQYWNlPzogc3RyaW5nO1xyXG4gIGJvb2tGb3JtYXRzPzogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQm9va1JhdGluZyB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBib29rSWQ6IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGF1dGhvcjogc3RyaW5nO1xyXG4gIHJhdGluZzogbnVtYmVyO1xyXG4gIGlzTGlrZWQ6IGJvb2xlYW47XHJcbiAgd2VpZ2h0OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXV0aG9yUmF0aW5nIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGF1dGhvck5hbWU6IHN0cmluZztcclxuICByYXRpbmc6IG51bWJlcjtcclxuICBpc0xpa2VkOiBib29sZWFuO1xyXG4gIHdlaWdodDogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJCb29rIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgYXV0aG9yOiBzdHJpbmc7XHJcbiAgY292ZXI6IHN0cmluZztcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gIHBhZ2VzOiBudW1iZXI7XHJcbiAgcHVibGlzaGVkWWVhcjogbnVtYmVyO1xyXG4gIGdlbnJlOiBzdHJpbmdbXTtcclxuICBtb29kOiBzdHJpbmdbXTtcclxuICBpc2JuOiBzdHJpbmc7XHJcbiAgcmF0aW5nOiBudW1iZXI7XHJcbiAgc3RhdHVzOiBcIndhbnQtdG8tcmVhZFwiIHwgXCJjdXJyZW50bHktcmVhZGluZ1wiIHwgXCJyZWFkXCI7XHJcbiAgZGF0ZUFkZGVkOiBzdHJpbmc7XHJcbiAgY3VycmVudFBhZ2U/OiBudW1iZXI7XHJcbiAgdXNlclJhdGluZz86IG51bWJlcjtcclxuICBub3Rlcz86IHN0cmluZztcclxuICBzdGFydGVkUmVhZGluZz86IHN0cmluZztcclxuICBmaW5pc2hlZFJlYWRpbmc/OiBzdHJpbmc7XHJcbiAgdXNlclJldmlldz86IHN0cmluZztcclxuICByZXZpZXdEYXRlPzogc3RyaW5nO1xyXG4gIGlzTGlrZWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlYWRpbmdHb2FsIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHllYXI6IG51bWJlcjtcclxuICB0YXJnZXRCb29rczogbnVtYmVyO1xyXG4gIHRhcmdldFBhZ2VzPzogbnVtYmVyO1xyXG4gIHRhcmdldEdlbnJlcz86IHN0cmluZ1tdO1xyXG4gIGlzQWN0aXZlOiBib29sZWFuO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQXBwU3RhdGUge1xyXG4gIC8vIE9uYm9hcmRpbmcgc3RhdGVcclxuICBoYXNDb21wbGV0ZWRPbmJvYXJkaW5nOiBib29sZWFuO1xyXG4gIGlzT25ib2FyZGluZ0luUHJvZ3Jlc3M6IGJvb2xlYW47XHJcbiAgY3VycmVudE9uYm9hcmRpbmdTdGVwOiBudW1iZXI7XHJcblxyXG4gIC8vIFVzZXIgcHJlZmVyZW5jZXNcclxuICB1c2VyUHJlZmVyZW5jZXM6IFVzZXJQcmVmZXJlbmNlcyB8IG51bGw7XHJcbiAgYm9va1JhdGluZ3M6IEJvb2tSYXRpbmdbXTtcclxuICBhdXRob3JSYXRpbmdzOiBBdXRob3JSYXRpbmdbXTtcclxuXHJcbiAgLy8gVXNlciBib29rcyBsaWJyYXJ5XHJcbiAgdXNlckJvb2tzOiBVc2VyQm9va1tdO1xyXG5cclxuICAvLyBSZWFkaW5nIGdvYWxzXHJcbiAgcmVhZGluZ0dvYWxzOiBSZWFkaW5nR29hbFtdO1xyXG5cclxuICAvLyBVSSBzdGF0ZVxyXG4gIGlzTG9hZGluZzogYm9vbGVhbjtcclxuXHJcbiAgLy8gQWN0aW9uc1xyXG4gIHNldE9uYm9hcmRpbmdDb21wbGV0ZWQ6IChjb21wbGV0ZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgc2V0T25ib2FyZGluZ1N0ZXA6IChzdGVwOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgc2V0T25ib2FyZGluZ0luUHJvZ3Jlc3M6IChpblByb2dyZXNzOiBib29sZWFuKSA9PiB2b2lkO1xyXG5cclxuICBzZXRVc2VyUHJlZmVyZW5jZXM6IChwcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzKSA9PiB2b2lkO1xyXG4gIHNldEJvb2tSYXRpbmdzOiAocmF0aW5nczogQm9va1JhdGluZ1tdKSA9PiB2b2lkO1xyXG4gIHNldEF1dGhvclJhdGluZ3M6IChyYXRpbmdzOiBBdXRob3JSYXRpbmdbXSkgPT4gdm9pZDtcclxuXHJcbiAgLy8gVXNlciBib29rcyBhY3Rpb25zXHJcbiAgc2V0VXNlckJvb2tzOiAoYm9va3M6IFVzZXJCb29rW10pID0+IHZvaWQ7XHJcbiAgYWRkVXNlckJvb2s6IChib29rOiBVc2VyQm9vaykgPT4gdm9pZDtcclxuICB1cGRhdGVVc2VyQm9vazogKGJvb2tJZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPFVzZXJCb29rPikgPT4gdm9pZDtcclxuICByZW1vdmVVc2VyQm9vazogKGJvb2tJZDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIGlzQm9va0luTGlicmFyeTogKGJvb2tJZDogc3RyaW5nKSA9PiBib29sZWFuO1xyXG4gIGdldEJvb2tGcm9tTGlicmFyeTogKGJvb2tJZDogc3RyaW5nKSA9PiBVc2VyQm9vayB8IHVuZGVmaW5lZDtcclxuICBjbGVhck9sZERpc2NvdmVyQm9va3M6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8vIFJlYWRpbmcgZ29hbHMgYWN0aW9uc1xyXG4gIHNldFJlYWRpbmdHb2FsczogKGdvYWxzOiBSZWFkaW5nR29hbFtdKSA9PiB2b2lkO1xyXG4gIGFkZFJlYWRpbmdHb2FsOiAoZ29hbDogUmVhZGluZ0dvYWwpID0+IHZvaWQ7XHJcbiAgdXBkYXRlUmVhZGluZ0dvYWw6IChnb2FsSWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxSZWFkaW5nR29hbD4pID0+IHZvaWQ7XHJcbiAgcmVtb3ZlUmVhZGluZ0dvYWw6IChnb2FsSWQ6IHN0cmluZykgPT4gdm9pZDtcclxuICBnZXRBY3RpdmVSZWFkaW5nR29hbDogKHllYXI/OiBudW1iZXIpID0+IFJlYWRpbmdHb2FsIHwgdW5kZWZpbmVkO1xyXG5cclxuICAvLyBCb29rIGludGVyYWN0aW9uIGFjdGlvbnNcclxuICBsaWtlQm9vazogKGJvb2tJZDogc3RyaW5nLCBib29rRGF0YTogUGFydGlhbDxVc2VyQm9vaz4pID0+IHZvaWQ7XHJcbiAgdW5saWtlQm9vazogKGJvb2tJZDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIHJhdGVCb29rOiAoXHJcbiAgICBib29rSWQ6IHN0cmluZyxcclxuICAgIHJhdGluZzogbnVtYmVyLFxyXG4gICAgYm9va0RhdGE/OiBQYXJ0aWFsPFVzZXJCb29rPlxyXG4gICkgPT4gdm9pZDtcclxuXHJcbiAgc2V0TG9hZGluZzogKGxvYWRpbmc6IGJvb2xlYW4pID0+IHZvaWQ7XHJcblxyXG4gIC8vIENvbXBsZXggYWN0aW9uc1xyXG4gIGNvbXBsZXRlT25ib2FyZGluZzogKFxyXG4gICAgcHJlZmVyZW5jZXM6IFVzZXJQcmVmZXJlbmNlcyxcclxuICAgIGJvb2tSYXRpbmdzOiBCb29rUmF0aW5nW10sXHJcbiAgICBhdXRob3JSYXRpbmdzOiBBdXRob3JSYXRpbmdbXVxyXG4gICkgPT4gdm9pZDtcclxuICByZXNldE9uYm9hcmRpbmc6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8vIEhlbHBlciBhY3Rpb25zXHJcbiAgX21pZ3JhdGVPbGRQbGFjZWhvbGRlcnM6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8vIENvbXB1dGVkIGdldHRlcnNcclxuICBnZXRSZWNvbW1lbmRhdGlvbkRhdGE6ICgpID0+IHtcclxuICAgIHByZWZlcmVuY2VzOiBVc2VyUHJlZmVyZW5jZXMgfCBudWxsO1xyXG4gICAgYm9va1JhdGluZ3M6IEJvb2tSYXRpbmdbXTtcclxuICAgIGF1dGhvclJhdGluZ3M6IEF1dGhvclJhdGluZ1tdO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB1c2VBcHBTdG9yZSA9IGNyZWF0ZTxBcHBTdGF0ZT4oKShcclxuICBwZXJzaXN0KFxyXG4gICAgKHNldCwgZ2V0KSA9PiAoe1xyXG4gICAgICAvLyBJbml0aWFsIHN0YXRlXHJcbiAgICAgIGhhc0NvbXBsZXRlZE9uYm9hcmRpbmc6IGZhbHNlLFxyXG4gICAgICBpc09uYm9hcmRpbmdJblByb2dyZXNzOiBmYWxzZSxcclxuICAgICAgY3VycmVudE9uYm9hcmRpbmdTdGVwOiAxLFxyXG4gICAgICB1c2VyUHJlZmVyZW5jZXM6IG51bGwsXHJcbiAgICAgIGJvb2tSYXRpbmdzOiBbXSxcclxuICAgICAgYXV0aG9yUmF0aW5nczogW10sXHJcbiAgICAgIHVzZXJCb29rczogW10sXHJcbiAgICAgIHJlYWRpbmdHb2FsczogW10sXHJcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXHJcblxyXG4gICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gbWlncmF0ZSBvbGQgcGxhY2Vob2xkZXIgVVJMc1xyXG4gICAgICBfbWlncmF0ZU9sZFBsYWNlaG9sZGVyczogKCkgPT5cclxuICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xyXG4gICAgICAgICAgdXNlckJvb2tzOiBzdGF0ZS51c2VyQm9va3MubWFwKChib29rKSA9PiAoe1xyXG4gICAgICAgICAgICAuLi5ib29rLFxyXG4gICAgICAgICAgICBjb3ZlcjogYm9vay5jb3Zlci5pbmNsdWRlcyhcInZpYS5wbGFjZWhvbGRlci5jb21cIilcclxuICAgICAgICAgICAgICA/IFwiL3BsYWNlaG9sZGVyLWJvb2suanBnXCJcclxuICAgICAgICAgICAgICA6IGJvb2suY292ZXIsXHJcbiAgICAgICAgICB9KSksXHJcbiAgICAgICAgfSkpLFxyXG5cclxuICAgICAgLy8gQmFzaWMgc2V0dGVyc1xyXG4gICAgICBzZXRPbmJvYXJkaW5nQ29tcGxldGVkOiAoY29tcGxldGVkKSA9PlxyXG4gICAgICAgIHNldCh7IGhhc0NvbXBsZXRlZE9uYm9hcmRpbmc6IGNvbXBsZXRlZCB9KSxcclxuXHJcbiAgICAgIHNldE9uYm9hcmRpbmdTdGVwOiAoc3RlcCkgPT4gc2V0KHsgY3VycmVudE9uYm9hcmRpbmdTdGVwOiBzdGVwIH0pLFxyXG5cclxuICAgICAgc2V0T25ib2FyZGluZ0luUHJvZ3Jlc3M6IChpblByb2dyZXNzKSA9PlxyXG4gICAgICAgIHNldCh7IGlzT25ib2FyZGluZ0luUHJvZ3Jlc3M6IGluUHJvZ3Jlc3MgfSksXHJcblxyXG4gICAgICBzZXRVc2VyUHJlZmVyZW5jZXM6IChwcmVmZXJlbmNlcykgPT5cclxuICAgICAgICBzZXQoeyB1c2VyUHJlZmVyZW5jZXM6IHByZWZlcmVuY2VzIH0pLFxyXG5cclxuICAgICAgc2V0Qm9va1JhdGluZ3M6IChyYXRpbmdzKSA9PiBzZXQoeyBib29rUmF0aW5nczogcmF0aW5ncyB9KSxcclxuXHJcbiAgICAgIHNldEF1dGhvclJhdGluZ3M6IChyYXRpbmdzKSA9PiBzZXQoeyBhdXRob3JSYXRpbmdzOiByYXRpbmdzIH0pLFxyXG5cclxuICAgICAgLy8gVXNlciBib29rcyBhY3Rpb25zXHJcbiAgICAgIHNldFVzZXJCb29rczogKGJvb2tzKSA9PiBzZXQoeyB1c2VyQm9va3M6IGJvb2tzIH0pLFxyXG5cclxuICAgICAgYWRkVXNlckJvb2s6IChib29rKSA9PlxyXG4gICAgICAgIHNldCgoc3RhdGUpID0+ICh7IHVzZXJCb29rczogWy4uLnN0YXRlLnVzZXJCb29rcywgYm9va10gfSkpLFxyXG5cclxuICAgICAgdXBkYXRlVXNlckJvb2s6IChib29rSWQsIHVwZGF0ZXMpID0+XHJcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4gKHtcclxuICAgICAgICAgIHVzZXJCb29rczogc3RhdGUudXNlckJvb2tzLm1hcCgoYm9vaykgPT5cclxuICAgICAgICAgICAgYm9vay5pZCA9PT0gYm9va0lkID8geyAuLi5ib29rLCAuLi51cGRhdGVzIH0gOiBib29rXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIH0pKSxcclxuXHJcbiAgICAgIHJlbW92ZVVzZXJCb29rOiAoYm9va0lkKSA9PlxyXG4gICAgICAgIHNldCgoc3RhdGUpID0+ICh7XHJcbiAgICAgICAgICB1c2VyQm9va3M6IHN0YXRlLnVzZXJCb29rcy5maWx0ZXIoKGJvb2spID0+IGJvb2suaWQgIT09IGJvb2tJZCksXHJcbiAgICAgICAgfSkpLFxyXG5cclxuICAgICAgY2xlYXJPbGREaXNjb3ZlckJvb2tzOiAoKSA9PlxyXG4gICAgICAgIHNldCgoc3RhdGUpID0+ICh7XHJcbiAgICAgICAgICB1c2VyQm9va3M6IHN0YXRlLnVzZXJCb29rcy5maWx0ZXIoXHJcbiAgICAgICAgICAgIChib29rKSA9PiAhYm9vay5pZC5zdGFydHNXaXRoKFwiZGlzY292ZXItXCIpXHJcbiAgICAgICAgICApLFxyXG4gICAgICAgIH0pKSxcclxuXHJcbiAgICAgIGlzQm9va0luTGlicmFyeTogKGJvb2tJZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0KCk7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlLnVzZXJCb29rcy5zb21lKChib29rKSA9PiBib29rLmlkID09PSBib29rSWQpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgZ2V0Qm9va0Zyb21MaWJyYXJ5OiAoYm9va0lkKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXQoKTtcclxuICAgICAgICByZXR1cm4gc3RhdGUudXNlckJvb2tzLmZpbmQoKGJvb2spID0+IGJvb2suaWQgPT09IGJvb2tJZCk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBSZWFkaW5nIGdvYWxzIGFjdGlvbnNcclxuICAgICAgc2V0UmVhZGluZ0dvYWxzOiAoZ29hbHMpID0+IHNldCh7IHJlYWRpbmdHb2FsczogZ29hbHMgfSksXHJcblxyXG4gICAgICBhZGRSZWFkaW5nR29hbDogKGdvYWwpID0+XHJcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4gKHsgcmVhZGluZ0dvYWxzOiBbLi4uc3RhdGUucmVhZGluZ0dvYWxzLCBnb2FsXSB9KSksXHJcblxyXG4gICAgICB1cGRhdGVSZWFkaW5nR29hbDogKGdvYWxJZCwgdXBkYXRlcykgPT5cclxuICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xyXG4gICAgICAgICAgcmVhZGluZ0dvYWxzOiBzdGF0ZS5yZWFkaW5nR29hbHMubWFwKChnb2FsKSA9PlxyXG4gICAgICAgICAgICBnb2FsLmlkID09PSBnb2FsSWQgPyB7IC4uLmdvYWwsIC4uLnVwZGF0ZXMgfSA6IGdvYWxcclxuICAgICAgICAgICksXHJcbiAgICAgICAgfSkpLFxyXG5cclxuICAgICAgcmVtb3ZlUmVhZGluZ0dvYWw6IChnb2FsSWQpID0+XHJcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4gKHtcclxuICAgICAgICAgIHJlYWRpbmdHb2Fsczogc3RhdGUucmVhZGluZ0dvYWxzLmZpbHRlcigoZ29hbCkgPT4gZ29hbC5pZCAhPT0gZ29hbElkKSxcclxuICAgICAgICB9KSksXHJcblxyXG4gICAgICBnZXRBY3RpdmVSZWFkaW5nR29hbDogKHllYXIpID0+IHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IGdldCgpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRZZWFyID0geWVhciB8fCBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgcmV0dXJuIHN0YXRlLnJlYWRpbmdHb2Fscy5maW5kKFxyXG4gICAgICAgICAgKGdvYWwpID0+IGdvYWwueWVhciA9PT0gY3VycmVudFllYXIgJiYgZ29hbC5pc0FjdGl2ZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBsaWtlQm9vazogKGJvb2tJZCwgYm9va0RhdGEpID0+XHJcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdCb29rID0gc3RhdGUudXNlckJvb2tzLmZpbmQoXHJcbiAgICAgICAgICAgIChib29rKSA9PiBib29rLmlkID09PSBib29rSWRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpZiAoZXhpc3RpbmdCb29rKSB7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBib29rXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgdXNlckJvb2tzOiBzdGF0ZS51c2VyQm9va3MubWFwKChib29rKSA9PlxyXG4gICAgICAgICAgICAgICAgYm9vay5pZCA9PT0gYm9va0lkID8geyAuLi5ib29rLCBpc0xpa2VkOiB0cnVlIH0gOiBib29rXHJcbiAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEFkZCBuZXcgYm9vayBhcyBsaWtlZFxyXG4gICAgICAgICAgICBjb25zdCBuZXdCb29rOiBVc2VyQm9vayA9IHtcclxuICAgICAgICAgICAgICBpZDogYm9va0lkLFxyXG4gICAgICAgICAgICAgIHRpdGxlOiBib29rRGF0YS50aXRsZSB8fCBcIlVua25vd24gVGl0bGVcIixcclxuICAgICAgICAgICAgICBhdXRob3I6IGJvb2tEYXRhLmF1dGhvciB8fCBcIlVua25vd24gQXV0aG9yXCIsXHJcbiAgICAgICAgICAgICAgY292ZXI6IGJvb2tEYXRhLmNvdmVyIHx8IFwiL3BsYWNlaG9sZGVyLWJvb2suanBnXCIsXHJcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGJvb2tEYXRhLmRlc2NyaXB0aW9uIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgcmF0aW5nOiBib29rRGF0YS5yYXRpbmcgfHwgMCxcclxuICAgICAgICAgICAgICBzdGF0dXM6IFwid2FudC10by1yZWFkXCIsXHJcbiAgICAgICAgICAgICAgZGF0ZUFkZGVkOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCJUXCIpWzBdLFxyXG4gICAgICAgICAgICAgIGdlbnJlOiBib29rRGF0YS5nZW5yZSB8fCBbXSxcclxuICAgICAgICAgICAgICBtb29kOiBib29rRGF0YS5tb29kIHx8IFtdLFxyXG4gICAgICAgICAgICAgIGlzYm46IGJvb2tEYXRhLmlzYm4gfHwgXCJcIixcclxuICAgICAgICAgICAgICBwYWdlczogYm9va0RhdGEucGFnZXMgfHwgMCxcclxuICAgICAgICAgICAgICBwdWJsaXNoZWRZZWFyOiBib29rRGF0YS5wdWJsaXNoZWRZZWFyIHx8IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSxcclxuICAgICAgICAgICAgICBpc0xpa2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAgIC4uLmJvb2tEYXRhLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4geyB1c2VyQm9va3M6IFsuLi5zdGF0ZS51c2VyQm9va3MsIG5ld0Jvb2tdIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSksXHJcblxyXG4gICAgICB1bmxpa2VCb29rOiAoYm9va0lkKSA9PlxyXG4gICAgICAgIHNldCgoc3RhdGUpID0+ICh7XHJcbiAgICAgICAgICB1c2VyQm9va3M6IHN0YXRlLnVzZXJCb29rcy5tYXAoKGJvb2spID0+XHJcbiAgICAgICAgICAgIGJvb2suaWQgPT09IGJvb2tJZCA/IHsgLi4uYm9vaywgaXNMaWtlZDogZmFsc2UgfSA6IGJvb2tcclxuICAgICAgICAgICksXHJcbiAgICAgICAgfSkpLFxyXG5cclxuICAgICAgcmF0ZUJvb2s6IChib29rSWQsIHJhdGluZywgYm9va0RhdGEpID0+XHJcbiAgICAgICAgc2V0KChzdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgZXhpc3RpbmdCb29rID0gc3RhdGUudXNlckJvb2tzLmZpbmQoXHJcbiAgICAgICAgICAgIChib29rKSA9PiBib29rLmlkID09PSBib29rSWRcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpZiAoZXhpc3RpbmdCb29rKSB7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBib29rXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgdXNlckJvb2tzOiBzdGF0ZS51c2VyQm9va3MubWFwKChib29rKSA9PlxyXG4gICAgICAgICAgICAgICAgYm9vay5pZCA9PT0gYm9va0lkID8geyAuLi5ib29rLCB1c2VyUmF0aW5nOiByYXRpbmcgfSA6IGJvb2tcclxuICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChib29rRGF0YSkge1xyXG4gICAgICAgICAgICAvLyBBZGQgbmV3IGJvb2sgd2l0aCByYXRpbmdcclxuICAgICAgICAgICAgY29uc3QgbmV3Qm9vazogVXNlckJvb2sgPSB7XHJcbiAgICAgICAgICAgICAgaWQ6IGJvb2tJZCxcclxuICAgICAgICAgICAgICB0aXRsZTogYm9va0RhdGEudGl0bGUgfHwgXCJVbmtub3duIFRpdGxlXCIsXHJcbiAgICAgICAgICAgICAgYXV0aG9yOiBib29rRGF0YS5hdXRob3IgfHwgXCJVbmtub3duIEF1dGhvclwiLFxyXG4gICAgICAgICAgICAgIGNvdmVyOiBib29rRGF0YS5jb3ZlciB8fCBcIi9wbGFjZWhvbGRlci1ib29rLmpwZ1wiLFxyXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBib29rRGF0YS5kZXNjcmlwdGlvbiB8fCBcIlwiLFxyXG4gICAgICAgICAgICAgIHJhdGluZzogYm9va0RhdGEucmF0aW5nIHx8IDAsXHJcbiAgICAgICAgICAgICAgc3RhdHVzOiBcIndhbnQtdG8tcmVhZFwiLFxyXG4gICAgICAgICAgICAgIGRhdGVBZGRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KFwiVFwiKVswXSxcclxuICAgICAgICAgICAgICBnZW5yZTogYm9va0RhdGEuZ2VucmUgfHwgW10sXHJcbiAgICAgICAgICAgICAgbW9vZDogYm9va0RhdGEubW9vZCB8fCBbXSxcclxuICAgICAgICAgICAgICBpc2JuOiBib29rRGF0YS5pc2JuIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgcGFnZXM6IGJvb2tEYXRhLnBhZ2VzIHx8IDAsXHJcbiAgICAgICAgICAgICAgcHVibGlzaGVkWWVhcjogYm9va0RhdGEucHVibGlzaGVkWWVhciB8fCBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCksXHJcbiAgICAgICAgICAgICAgdXNlclJhdGluZzogcmF0aW5nLFxyXG4gICAgICAgICAgICAgIC4uLmJvb2tEYXRhLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4geyB1c2VyQm9va3M6IFsuLi5zdGF0ZS51c2VyQm9va3MsIG5ld0Jvb2tdIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfSksXHJcblxyXG4gICAgICBzZXRMb2FkaW5nOiAobG9hZGluZykgPT4gc2V0KHsgaXNMb2FkaW5nOiBsb2FkaW5nIH0pLFxyXG5cclxuICAgICAgLy8gQ29tcGxleCBhY3Rpb25zXHJcbiAgICAgIGNvbXBsZXRlT25ib2FyZGluZzogKHByZWZlcmVuY2VzLCBib29rUmF0aW5ncywgYXV0aG9yUmF0aW5ncykgPT5cclxuICAgICAgICBzZXQoe1xyXG4gICAgICAgICAgaGFzQ29tcGxldGVkT25ib2FyZGluZzogdHJ1ZSxcclxuICAgICAgICAgIGlzT25ib2FyZGluZ0luUHJvZ3Jlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgdXNlclByZWZlcmVuY2VzOiBwcmVmZXJlbmNlcyxcclxuICAgICAgICAgIGJvb2tSYXRpbmdzLFxyXG4gICAgICAgICAgYXV0aG9yUmF0aW5ncyxcclxuICAgICAgICAgIGN1cnJlbnRPbmJvYXJkaW5nU3RlcDogMSwgLy8gUmVzZXQgZm9yIG5leHQgdGltZVxyXG4gICAgICAgIH0pLFxyXG5cclxuICAgICAgcmVzZXRPbmJvYXJkaW5nOiAoKSA9PlxyXG4gICAgICAgIHNldCh7XHJcbiAgICAgICAgICBoYXNDb21wbGV0ZWRPbmJvYXJkaW5nOiBmYWxzZSxcclxuICAgICAgICAgIGlzT25ib2FyZGluZ0luUHJvZ3Jlc3M6IGZhbHNlLFxyXG4gICAgICAgICAgY3VycmVudE9uYm9hcmRpbmdTdGVwOiAxLFxyXG4gICAgICAgICAgdXNlclByZWZlcmVuY2VzOiBudWxsLFxyXG4gICAgICAgICAgYm9va1JhdGluZ3M6IFtdLFxyXG4gICAgICAgICAgYXV0aG9yUmF0aW5nczogW10sXHJcbiAgICAgICAgfSksXHJcblxyXG4gICAgICAvLyBDb21wdXRlZCBnZXR0ZXJzXHJcbiAgICAgIGdldFJlY29tbWVuZGF0aW9uRGF0YTogKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0KCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHByZWZlcmVuY2VzOiBzdGF0ZS51c2VyUHJlZmVyZW5jZXMsXHJcbiAgICAgICAgICBib29rUmF0aW5nczogc3RhdGUuYm9va1JhdGluZ3MsXHJcbiAgICAgICAgICBhdXRob3JSYXRpbmdzOiBzdGF0ZS5hdXRob3JSYXRpbmdzLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0sXHJcbiAgICB9KSxcclxuICAgIHtcclxuICAgICAgbmFtZTogXCJib29raGF2ZW4tYXBwLXN0b3JlXCIsXHJcbiAgICAgIHN0b3JhZ2U6IGNyZWF0ZUpTT05TdG9yYWdlKCgpID0+IGxvY2FsU3RvcmFnZSksXHJcbiAgICAgIC8vIE9ubHkgcGVyc2lzdCBjZXJ0YWluIHBhcnRzIG9mIHRoZSBzdGF0ZVxyXG4gICAgICBwYXJ0aWFsaXplOiAoc3RhdGUpID0+ICh7XHJcbiAgICAgICAgaGFzQ29tcGxldGVkT25ib2FyZGluZzogc3RhdGUuaGFzQ29tcGxldGVkT25ib2FyZGluZyxcclxuICAgICAgICB1c2VyUHJlZmVyZW5jZXM6IHN0YXRlLnVzZXJQcmVmZXJlbmNlcyxcclxuICAgICAgICBib29rUmF0aW5nczogc3RhdGUuYm9va1JhdGluZ3MsXHJcbiAgICAgICAgYXV0aG9yUmF0aW5nczogc3RhdGUuYXV0aG9yUmF0aW5ncyxcclxuICAgICAgICB1c2VyQm9va3M6IHN0YXRlLnVzZXJCb29rcywgLy8gSW5jbHVkZSB1c2VyQm9va3MgaW4gcGVyc2lzdGVuY2VcclxuICAgICAgfSksXHJcbiAgICAgIC8vIEFkZCBzb21lIHNhZmVndWFyZHMgdG8gcHJldmVudCBoeWRyYXRpb24gaXNzdWVzXHJcbiAgICAgIHNraXBIeWRyYXRpb246IGZhbHNlLFxyXG4gICAgfVxyXG4gIClcclxuKTtcclxuXHJcbi8vIEh5ZHJhdGlvbi1zYWZlIGhvb2sgdG8gcHJldmVudCBTU1IgbWlzbWF0Y2hlc1xyXG5leHBvcnQgY29uc3QgdXNlSHlkcmF0ZWRTdG9yZSA9ICgpID0+IHtcclxuICBjb25zdCBbaGFzSHlkcmF0ZWQsIHNldEhhc0h5ZHJhdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vIFdhaXQgZm9yIFp1c3RhbmQgdG8gaHlkcmF0ZVxyXG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSB1c2VBcHBTdG9yZS5wZXJzaXN0Lm9uRmluaXNoSHlkcmF0aW9uKCgpID0+IHtcclxuICAgICAgc2V0SGFzSHlkcmF0ZWQodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBJZiBhbHJlYWR5IGh5ZHJhdGVkXHJcbiAgICBpZiAodXNlQXBwU3RvcmUucGVyc2lzdC5oYXNIeWRyYXRlZCgpKSB7XHJcbiAgICAgIHNldEhhc0h5ZHJhdGVkKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1bnN1YnNjcmliZTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiBoYXNIeWRyYXRlZDtcclxufTtcclxuXHJcbi8vIEluZGl2aWR1YWwgc2VsZWN0b3JzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcclxuZXhwb3J0IGNvbnN0IHVzZUhhc0NvbXBsZXRlZE9uYm9hcmRpbmcgPSAoKSA9PlxyXG4gIHVzZUFwcFN0b3JlKChzdGF0ZSkgPT4gc3RhdGUuaGFzQ29tcGxldGVkT25ib2FyZGluZyk7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlT25ib2FyZGluZ1N0ZXAgPSAoKSA9PlxyXG4gIHVzZUFwcFN0b3JlKChzdGF0ZSkgPT4gc3RhdGUuY3VycmVudE9uYm9hcmRpbmdTdGVwKTtcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VPbmJvYXJkaW5nQWN0aW9ucyA9ICgpID0+XHJcbiAgdXNlQXBwU3RvcmUoKHN0YXRlKSA9PiAoe1xyXG4gICAgc2V0U3RlcDogc3RhdGUuc2V0T25ib2FyZGluZ1N0ZXAsXHJcbiAgICBjb21wbGV0ZTogc3RhdGUuY29tcGxldGVPbmJvYXJkaW5nLFxyXG4gICAgcmVzZXQ6IHN0YXRlLnJlc2V0T25ib2FyZGluZyxcclxuICB9KSk7XHJcblxyXG4vLyBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwga2VlcCB0aGUgY29tYmluZWQgaG9vayBidXQgbWFrZSBpdCBtb3JlIHN0YWJsZVxyXG5leHBvcnQgY29uc3QgdXNlT25ib2FyZGluZ1N0YXRlID0gKCkgPT4ge1xyXG4gIGNvbnN0IGhhc0NvbXBsZXRlZCA9IHVzZUFwcFN0b3JlKChzdGF0ZSkgPT4gc3RhdGUuaGFzQ29tcGxldGVkT25ib2FyZGluZyk7XHJcbiAgY29uc3QgaXNJblByb2dyZXNzID0gdXNlQXBwU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5pc09uYm9hcmRpbmdJblByb2dyZXNzKTtcclxuICBjb25zdCBjdXJyZW50U3RlcCA9IHVzZUFwcFN0b3JlKChzdGF0ZSkgPT4gc3RhdGUuY3VycmVudE9uYm9hcmRpbmdTdGVwKTtcclxuICBjb25zdCBzZXRDb21wbGV0ZWQgPSB1c2VBcHBTdG9yZSgoc3RhdGUpID0+IHN0YXRlLnNldE9uYm9hcmRpbmdDb21wbGV0ZWQpO1xyXG4gIGNvbnN0IHNldEluUHJvZ3Jlc3MgPSB1c2VBcHBTdG9yZSgoc3RhdGUpID0+IHN0YXRlLnNldE9uYm9hcmRpbmdJblByb2dyZXNzKTtcclxuICBjb25zdCBzZXRTdGVwID0gdXNlQXBwU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5zZXRPbmJvYXJkaW5nU3RlcCk7XHJcbiAgY29uc3QgY29tcGxldGUgPSB1c2VBcHBTdG9yZSgoc3RhdGUpID0+IHN0YXRlLmNvbXBsZXRlT25ib2FyZGluZyk7XHJcbiAgY29uc3QgcmVzZXQgPSB1c2VBcHBTdG9yZSgoc3RhdGUpID0+IHN0YXRlLnJlc2V0T25ib2FyZGluZyk7XHJcblxyXG4gIC8vIFJldHVybiBhIHN0YWJsZSBvYmplY3QgYnkgdXNpbmcgdXNlTWVtbyBpZiBuZWVkZWRcclxuICByZXR1cm4ge1xyXG4gICAgaGFzQ29tcGxldGVkLFxyXG4gICAgaXNJblByb2dyZXNzLFxyXG4gICAgY3VycmVudFN0ZXAsXHJcbiAgICBzZXRDb21wbGV0ZWQsXHJcbiAgICBzZXRJblByb2dyZXNzLFxyXG4gICAgc2V0U3RlcCxcclxuICAgIGNvbXBsZXRlLFxyXG4gICAgcmVzZXQsXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VVc2VyRGF0YSA9ICgpID0+IHtcclxuICBjb25zdCBwcmVmZXJlbmNlcyA9IHVzZUFwcFN0b3JlKChzdGF0ZSkgPT4gc3RhdGUudXNlclByZWZlcmVuY2VzKTtcclxuICBjb25zdCBib29rUmF0aW5ncyA9IHVzZUFwcFN0b3JlKChzdGF0ZSkgPT4gc3RhdGUuYm9va1JhdGluZ3MpO1xyXG4gIGNvbnN0IGF1dGhvclJhdGluZ3MgPSB1c2VBcHBTdG9yZSgoc3RhdGUpID0+IHN0YXRlLmF1dGhvclJhdGluZ3MpO1xyXG4gIGNvbnN0IHNldFByZWZlcmVuY2VzID0gdXNlQXBwU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5zZXRVc2VyUHJlZmVyZW5jZXMpO1xyXG4gIGNvbnN0IHNldEJvb2tSYXRpbmdzID0gdXNlQXBwU3RvcmUoKHN0YXRlKSA9PiBzdGF0ZS5zZXRCb29rUmF0aW5ncyk7XHJcbiAgY29uc3Qgc2V0QXV0aG9yUmF0aW5ncyA9IHVzZUFwcFN0b3JlKChzdGF0ZSkgPT4gc3RhdGUuc2V0QXV0aG9yUmF0aW5ncyk7XHJcbiAgY29uc3QgZ2V0UmVjb21tZW5kYXRpb25EYXRhID0gdXNlQXBwU3RvcmUoXHJcbiAgICAoc3RhdGUpID0+IHN0YXRlLmdldFJlY29tbWVuZGF0aW9uRGF0YVxyXG4gICk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwcmVmZXJlbmNlcyxcclxuICAgIGJvb2tSYXRpbmdzLFxyXG4gICAgYXV0aG9yUmF0aW5ncyxcclxuICAgIHNldFByZWZlcmVuY2VzLFxyXG4gICAgc2V0Qm9va1JhdGluZ3MsXHJcbiAgICBzZXRBdXRob3JSYXRpbmdzLFxyXG4gICAgZ2V0UmVjb21tZW5kYXRpb25EYXRhLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgdXNlQXBwTG9hZGluZyA9ICgpID0+XHJcbiAgdXNlQXBwU3RvcmUoKHN0YXRlKSA9PiAoe1xyXG4gICAgaXNMb2FkaW5nOiBzdGF0ZS5pc0xvYWRpbmcsXHJcbiAgICBzZXRMb2FkaW5nOiBzdGF0ZS5zZXRMb2FkaW5nLFxyXG4gIH0pKTtcclxuIl0sIm5hbWVzIjpbImNyZWF0ZSIsInBlcnNpc3QiLCJjcmVhdGVKU09OU3RvcmFnZSIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlQXBwU3RvcmUiLCJzZXQiLCJnZXQiLCJoYXNDb21wbGV0ZWRPbmJvYXJkaW5nIiwiaXNPbmJvYXJkaW5nSW5Qcm9ncmVzcyIsImN1cnJlbnRPbmJvYXJkaW5nU3RlcCIsInVzZXJQcmVmZXJlbmNlcyIsImJvb2tSYXRpbmdzIiwiYXV0aG9yUmF0aW5ncyIsInVzZXJCb29rcyIsInJlYWRpbmdHb2FscyIsImlzTG9hZGluZyIsIl9taWdyYXRlT2xkUGxhY2Vob2xkZXJzIiwic3RhdGUiLCJtYXAiLCJib29rIiwiY292ZXIiLCJpbmNsdWRlcyIsInNldE9uYm9hcmRpbmdDb21wbGV0ZWQiLCJjb21wbGV0ZWQiLCJzZXRPbmJvYXJkaW5nU3RlcCIsInN0ZXAiLCJzZXRPbmJvYXJkaW5nSW5Qcm9ncmVzcyIsImluUHJvZ3Jlc3MiLCJzZXRVc2VyUHJlZmVyZW5jZXMiLCJwcmVmZXJlbmNlcyIsInNldEJvb2tSYXRpbmdzIiwicmF0aW5ncyIsInNldEF1dGhvclJhdGluZ3MiLCJzZXRVc2VyQm9va3MiLCJib29rcyIsImFkZFVzZXJCb29rIiwidXBkYXRlVXNlckJvb2siLCJib29rSWQiLCJ1cGRhdGVzIiwiaWQiLCJyZW1vdmVVc2VyQm9vayIsImZpbHRlciIsImNsZWFyT2xkRGlzY292ZXJCb29rcyIsInN0YXJ0c1dpdGgiLCJpc0Jvb2tJbkxpYnJhcnkiLCJzb21lIiwiZ2V0Qm9va0Zyb21MaWJyYXJ5IiwiZmluZCIsInNldFJlYWRpbmdHb2FscyIsImdvYWxzIiwiYWRkUmVhZGluZ0dvYWwiLCJnb2FsIiwidXBkYXRlUmVhZGluZ0dvYWwiLCJnb2FsSWQiLCJyZW1vdmVSZWFkaW5nR29hbCIsImdldEFjdGl2ZVJlYWRpbmdHb2FsIiwieWVhciIsImN1cnJlbnRZZWFyIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwiaXNBY3RpdmUiLCJsaWtlQm9vayIsImJvb2tEYXRhIiwiZXhpc3RpbmdCb29rIiwiaXNMaWtlZCIsIm5ld0Jvb2siLCJ0aXRsZSIsImF1dGhvciIsImRlc2NyaXB0aW9uIiwicmF0aW5nIiwic3RhdHVzIiwiZGF0ZUFkZGVkIiwidG9JU09TdHJpbmciLCJzcGxpdCIsImdlbnJlIiwibW9vZCIsImlzYm4iLCJwYWdlcyIsInB1Ymxpc2hlZFllYXIiLCJ1bmxpa2VCb29rIiwicmF0ZUJvb2siLCJ1c2VyUmF0aW5nIiwic2V0TG9hZGluZyIsImxvYWRpbmciLCJjb21wbGV0ZU9uYm9hcmRpbmciLCJyZXNldE9uYm9hcmRpbmciLCJnZXRSZWNvbW1lbmRhdGlvbkRhdGEiLCJuYW1lIiwic3RvcmFnZSIsImxvY2FsU3RvcmFnZSIsInBhcnRpYWxpemUiLCJza2lwSHlkcmF0aW9uIiwidXNlSHlkcmF0ZWRTdG9yZSIsImhhc0h5ZHJhdGVkIiwic2V0SGFzSHlkcmF0ZWQiLCJ1bnN1YnNjcmliZSIsIm9uRmluaXNoSHlkcmF0aW9uIiwidXNlSGFzQ29tcGxldGVkT25ib2FyZGluZyIsInVzZU9uYm9hcmRpbmdTdGVwIiwidXNlT25ib2FyZGluZ0FjdGlvbnMiLCJzZXRTdGVwIiwiY29tcGxldGUiLCJyZXNldCIsInVzZU9uYm9hcmRpbmdTdGF0ZSIsImhhc0NvbXBsZXRlZCIsImlzSW5Qcm9ncmVzcyIsImN1cnJlbnRTdGVwIiwic2V0Q29tcGxldGVkIiwic2V0SW5Qcm9ncmVzcyIsInVzZVVzZXJEYXRhIiwic2V0UHJlZmVyZW5jZXMiLCJ1c2VBcHBMb2FkaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./stores/useAppStore.ts\n"));

/***/ })

});