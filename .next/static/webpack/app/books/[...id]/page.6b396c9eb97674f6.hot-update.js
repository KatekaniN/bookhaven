"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/books/[...id]/page",{

/***/ "(app-pages-browser)/./lib/openLibrary.ts":
/*!****************************!*\
  !*** ./lib/openLibrary.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenLibraryAPI: function() { return /* binding */ OpenLibraryAPI; },\n/* harmony export */   debounce: function() { return /* binding */ debounce; }\n/* harmony export */ });\nconst OPEN_LIBRARY_BASE_URL = \"https://openlibrary.org\";\nconst COVERS_BASE_URL = \"https://covers.openlibrary.org/b\";\nclass OpenLibraryAPI {\n    static async searchBooks(query) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        const searchParams = new URLSearchParams({\n            q: query,\n            limit: limit.toString(),\n            offset: offset.toString(),\n            fields: \"key,title,author_name,first_publish_year,isbn,cover_i,publisher,language,subject,ratings_average,ratings_count,want_to_read_count,currently_reading_count,already_read_count\"\n        });\n        const response = await fetch(\"\".concat(OPEN_LIBRARY_BASE_URL, \"/search.json?\").concat(searchParams));\n        if (!response.ok) {\n            throw new Error(\"Search failed: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    static async getBookDetails(bookKey) {\n        const response = await fetch(\"\".concat(OPEN_LIBRARY_BASE_URL).concat(bookKey, \".json\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch book details: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    static async getAuthorDetails(authorKey) {\n        const response = await fetch(\"\".concat(OPEN_LIBRARY_BASE_URL).concat(authorKey, \".json\"));\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch author details: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    static getCoverUrl(coverId) {\n        let size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"M\";\n        return \"\".concat(COVERS_BASE_URL, \"/id/\").concat(coverId, \"-\").concat(size, \".jpg\");\n    }\n    static async searchByGenre(genre) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        return this.searchBooks('subject:\"'.concat(genre, '\"'), limit, offset);\n    }\n    static async searchByAuthor(author) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20, offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;\n        return this.searchBooks('author:\"'.concat(author, '\"'), limit, offset);\n    }\n    static async searchByISBN(isbn) {\n        return this.searchBooks(\"isbn:\".concat(isbn), 1, 0);\n    }\n    static async getTrendingBooks() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20;\n        // Use a search for popular books (this is a simplified approach)\n        return this.searchBooks(\"*\", limit, 0);\n    }\n    static async getPopularBooksByGenre(genre) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n        // Search for popular books in genre, sorted by want-to-read count\n        const searchParams = new URLSearchParams({\n            q: 'subject:\"'.concat(genre, '\" AND has_fulltext:true'),\n            limit: limit.toString(),\n            offset: \"0\",\n            sort: \"want_to_read_count desc\",\n            fields: \"key,title,author_name,first_publish_year,isbn,cover_i,publisher,language,subject,ratings_average,ratings_count,want_to_read_count,currently_reading_count,already_read_count,edition_count\"\n        });\n        const response = await fetch(\"\".concat(OPEN_LIBRARY_BASE_URL, \"/search.json?\").concat(searchParams));\n        if (!response.ok) {\n            throw new Error(\"Search failed: \".concat(response.statusText));\n        }\n        return response.json();\n    }\n    static formatBookData(book) {\n        var _book_author_name, _book_isbn, _book_subject;\n        // Extract just the ID part from the key (e.g., \"/works/OL15601954W\" -> \"works/OL15601954W\")\n        const bookId = book.key.startsWith(\"/\") ? book.key.slice(1) : book.key;\n        return {\n            id: bookId,\n            title: book.title,\n            author: ((_book_author_name = book.author_name) === null || _book_author_name === void 0 ? void 0 : _book_author_name[0]) || \"Unknown Author\",\n            authors: book.author_name || [],\n            cover: book.cover_i ? this.getCoverUrl(book.cover_i) : \"/placeholder-book.svg\",\n            publishYear: book.first_publish_year,\n            isbn: (_book_isbn = book.isbn) === null || _book_isbn === void 0 ? void 0 : _book_isbn[0],\n            rating: book.ratings_average,\n            reviewCount: book.ratings_count,\n            subjects: ((_book_subject = book.subject) === null || _book_subject === void 0 ? void 0 : _book_subject.slice(0, 5)) || [],\n            publishers: book.publisher || [],\n            languages: book.language || [],\n            wantToReadCount: book.want_to_read_count,\n            currentlyReadingCount: book.currently_reading_count,\n            alreadyReadCount: book.already_read_count\n        };\n    }\n}\n// Helper function to debounce search requests\nfunction debounce(func, wait) {\n    let timeout;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        clearTimeout(timeout);\n        timeout = setTimeout(()=>func(...args), wait);\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/openLibrary.ts\n"));

/***/ })

});