{"kind":"FETCH","data":{"headers":{"access-control-allow-method":"GET, OPTIONS","access-control-allow-origin":"*","access-control-max-age":"86400","connection":"keep-alive","content-type":"application/json","date":"Sat, 23 Aug 2025 13:46:32 GMT","referrer-policy":"no-referrer-when-downgrade","server":"nginx/1.28.0","transfer-encoding":"chunked","x-ol-stats":"\"SR 1 0.042 TT 0 0.045\""},"body":"","status":200,"url":"https://openlibrary.org/search.json?q=gayle+forman&limit=20&offset=0&fields=key%2Ctitle%2Cauthor_name%2Cfirst_publish_year%2Cisbn%2Ccover_i%2Cpublisher%2Clanguage%2Csubject%2Cratings_average%2Cratings_count%2Cwant_to_read_count%2Ccurrently_reading_count%2Calready_read_count"},"revalidate":31536000,"tags":[]}